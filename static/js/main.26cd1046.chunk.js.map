{"version":3,"sources":["components/card-img/card.jsx","components/card-list/CardList.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","username","address","street","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","res","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAeeA,MAZf,SAAcC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,2BAAqEC,IAAI,YACrF,6BAAKL,EAAMG,QAAQG,OACjB,+BAAON,EAAMG,QAAQI,QACrB,+BAAOP,EAAMG,QAAQK,WACrB,+BAAOR,EAAMG,QAAQM,QAAQC,aCKlBC,MAXf,SAAkBX,GAEhB,OACE,8BACE,sBAAMC,UAAU,YAAhB,SACGD,EAAMY,SAASC,KAAI,SAAAV,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,Y,MCO3CU,MAbf,YAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAChC,OACE,8BACE,uBACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCsCHG,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAmBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAcd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAS,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC9B,GAAD,OACvCA,EAAQG,KAAK4B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKjC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,6BACA,cAAC,EAAD,CACEc,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.26cd1046.chunk.js","sourcesContent":["import React from 'react'\nimport card from './card.css'\n\nfunction Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size= 180x180`} alt=\"monster\" />\n  <h2>{props.monster.name}</h2> \n    <span>{props.monster.email}</span>\n    <span>{props.monster.username}</span>\n    <span>{props.monster.address.street}</span>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport cardListstyle from './cardList.style.css'\nimport Card from '../card-img/card'\n\nfunction CardList(props)\n{\n  return (\n    <div>\n      <span className='card-list'>\n        {props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n        </span>\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\nimport './search-box.styles.css'\n\nfunction SearchBox({ placeholder, handleChange }) {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox\n","import { Component } from 'react';\nimport CardList from './components/card-list/CardList.jsx'\nimport SearchBox from './components/search-box/search-box'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // this.handleChange = this.handleChange.bind(this);\n    //BIND METHOD IS USED WHEN NOT USING ARROW FUNCTIOM\n    // E.G handleChange(){\n    // this.setState({ searchField: e.target.value });\n    // }\n  }\n\n  //fetching list of monsters from placeholder API\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((res) => this.setState({ monsters: res }));\n  }\n// search filter event\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 className=\"page-title\">Monster Roledex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}